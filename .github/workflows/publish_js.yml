name: Build & publish JS SDK
env:
  DEBUG: napi:*
  APP_NAME: topk-js
  MACOSX_DEPLOYMENT_TARGET: "10.13"
  DISABLE_V8_COMPILE_CACHE: 1
permissions:
  contents: write
  id-token: write
defaults:
  run:
    working-directory: ./topk-js
"on":
  workflow_dispatch:
    inputs:
      publish:
        type: boolean
        description: "Whether to publish the release to npm"
        default: false
  workflow_call:
    inputs:
      publish:
        type: boolean
        description: "Whether to publish the release to npm"
        default: false

jobs:
  build:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            setup: |
              curl -L -o protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v29.3/protoc-29.3-osx-x86_64.zip && unzip protoc.zip && mv bin/protoc /usr/local/bin/protoc && protoc --version
            build: yarn build --target x86_64-apple-darwin
          - host: windows-latest
            setup: |
              mkdir /tmp/protoc
              cd /tmp/protoc
              curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v29.3/protoc-29.3-win64.zip
              unzip protoc-29.3-win64.zip -d /tmp/protoc
            build: PROTOC=/tmp/protoc/bin/protoc.exe yarn build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            setup: |
              mkdir /tmp/protoc
              cd /tmp/protoc
              curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v29.3/protoc-29.3-win32.zip
              unzip protoc-29.3-win32.zip -d /tmp/protoc
            build: PROTOC=/tmp/protoc/bin/protoc.exe yarn build --target i686-pc-windows-msvc
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            setup: |
              sudo apt-get update
              sudo apt-get install -y unzip && curl -L -o protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v29.3/protoc-29.3-linux-x86_64.zip && unzip protoc.zip && sudo mv bin/protoc /usr/local/bin/protoc && protoc --version
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: yarn build --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            setup: |
              sudo apt-get update
              sudo apt-get install -y unzip && curl -L -o protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v29.3/protoc-29.3-linux-x86_64.zip && unzip protoc.zip && sudo mv bin/protoc /usr/local/bin/protoc && protoc --version
              sudo apt-get install -y gcc-arm-linux-gnueabihf
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: yarn build --target x86_64-unknown-linux-musl
          - host: macos-latest
            target: aarch64-apple-darwin
            setup: |
              curl -L -o protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v29.3/protoc-29.3-osx-aarch_64.zip && unzip protoc.zip && mv bin/protoc /usr/local/bin/protoc && protoc --version
            build: yarn build --target aarch64-apple-darwin
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            setup: |
              sudo apt-get update
              sudo apt install -y protobuf-compiler
              cp /usr/bin/protoc /usr/local/bin/protoc
              protoc --version
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: yarn build --target aarch64-unknown-linux-gnu
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install -y gcc-arm-linux-gnueabihf
              sudo apt-get install -y musl-tools
              sudo ln -s /usr/bin/arm-linux-gnueabihf-gcc /usr/bin/arm-linux-musleabihf-gcc
              sudo apt-get install -y unzip && curl -L -o protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v29.3/protoc-29.3-linux-x86_64.zip && unzip protoc.zip && sudo mv bin/protoc /usr/local/bin/protoc && protoc --version
            build: yarn build --target armv7-unknown-linux-gnueabihf
          - host: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            setup: |
              sudo apt-get update
              sudo apt-get install -y unzip && curl -L -o protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v29.3/protoc-29.3-linux-x86_64.zip && unzip protoc.zip && sudo mv bin/protoc /usr/local/bin/protoc && protoc --version
              sudo apt-get install -y gcc-arm-linux-gnueabihf
              sudo apt-get install -y musl-tools
              sudo ln -s /usr/bin/arm-linux-gnueabihf-gcc /usr/bin/arm-linux-musleabihf-gcc
            build: yarn build --target armv7-unknown-linux-musleabihf
          - host: ubuntu-latest
            target: aarch64-linux-android
            setup: |
              sudo apt-get update
              sudo apt-get install -y unzip && curl -L -o protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v29.3/protoc-29.3-linux-x86_64.zip && unzip protoc.zip && sudo mv bin/protoc /usr/local/bin/protoc && protoc --version
            build: yarn build --target aarch64-linux-android
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            setup: |
              sudo apt-get update
              sudo apt-get install -y unzip && curl -L -o protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v29.3/protoc-29.3-linux-x86_64.zip && unzip protoc.zip && sudo mv bin/protoc /usr/local/bin/protoc && protoc --version
            build: yarn build --target armv7-linux-androideabi
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            setup: |
              sudo apt-get update
              sudo apt install -y protobuf-compiler
              cp /usr/bin/protoc /usr/local/bin/protoc
              protoc --version
              sudo apt-get install -y gcc-arm-linux-gnueabihf
              sudo apt-get install -y musl-tools
              sudo ln -s /usr/bin/arm-linux-gnueabihf-gcc /usr/bin/arm-linux-musleabihf-gcc
            build: |-
              set -e &&
              rustup target add aarch64-unknown-linux-musl &&
              yarn build --target aarch64-unknown-linux-musl
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            setup: |
              mkdir /tmp/protoc
              cd /tmp/protoc
              curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v29.3/protoc-29.3-win64.zip
              unzip protoc-29.3-win64.zip -d /tmp/protoc
            build: PROTOC=/tmp/protoc/bin/protoc.exe yarn build --target aarch64-pc-windows-msvc
          - host: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-riscv64-linux-gnu -y
              sudo apt-get install -y unzip && curl -L -o protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v29.3/protoc-29.3-linux-x86_64.zip && unzip protoc.zip && sudo mv bin/protoc /usr/local/bin/protoc && protoc --version
            build: yarn build --target riscv64gc-unknown-linux-gnu
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: ./topk-js
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.14.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build/topk-js"
          run: |
            set -e

            if [[ "${{ matrix.settings.docker }}" == *"alpine"* ]]; then
              apk add --no-cache unzip curl
            else
              apt-get install -y unzip curl
            fi

            PROTOC_ARCH="x86_64"
            if [[ "${{ matrix.settings.docker }}" == *"aarch64"* ]]; then
              PROTOC_ARCH="aarch_64"
            fi

            mkdir -p protoc
            cd protoc
            curl -L -o protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v29.3/protoc-29.3-linux-${PROTOC_ARCH}.zip
            echo "Unzipping protoc"
            unzip protoc.zip
            echo "Moving protoc to /usr/local/bin"
            mv bin/protoc /usr/local/bin/protoc
            echo "Verifying protoc version"
            protoc --version
            echo "Building"
            ${{ matrix.settings.build }}
      - name: Build
        run: |
          ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ./topk-js/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  # build-freebsd:
  #   runs-on: macos-13
  #   name: Build FreeBSD
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Build
  #       id: build
  #       uses: cross-platform-actions/action@v0.24.0
  #       env:
  #         DEBUG: napi:*
  #         RUSTUP_IO_THREADS: 1
  #       with:
  #         operating_system: freebsd
  #         version: '13.2'
  #         memory: 8G
  #         cpu_count: 3
  #         environment_variables: DEBUG RUSTUP_IO_THREADS
  #         shell: bash
  #         run: |
  #           sudo pkg install -y -f curl node libnghttp2 npm
  #           sudo npm install -g yarn --ignore-scripts
  #           curl https://sh.rustup.rs -sSf --output rustup.sh
  #           sh rustup.sh -y --profile minimal --default-toolchain stable
  #           source "$HOME/.cargo/env"
  #           echo "~~~~ rustc --version ~~~~"
  #           rustc --version
  #           echo "~~~~ node -v ~~~~"
  #           node -v
  #           echo "~~~~ yarn --version ~~~~"
  #           yarn --version
  #           pwd
  #           ls -lah
  #           whoami
  #           env
  #           freebsd-version
  #           cd topk-js
  #           yarn install
  #           yarn build
  #           yarn test
  #           rm -rf node_modules
  #           rm -rf target
  #           rm -rf .yarn/cache
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: bindings-freebsd
  #         path: ./topk-js/${{ env.APP_NAME }}.*.node
  #         if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
        node:
          - "20"
          - "22"
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          cache-dependency-path: ./topk-js
          architecture: x64
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ./topk-js
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        env:
          TOPK_API_KEY: ${{ secrets.TOPK_API_KEY }}
        run: yarn test
  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "20"
          - "22"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          cache-dependency-path: ./topk-js
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: ./topk-js
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        env:
          TOPK_API_KEY: ${{ secrets.TOPK_API_KEY }}
        run: docker run -e TOPK_API_KEY --rm -v $(pwd):/build -w /build/topk-js node:${{ matrix.node }}-slim bash -c 'apt-get update && apt-get install ca-certificates -y && yarn test'
  test-linux-x64-musl-binding:
    name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "20"
          - "22"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          cache-dependency-path: ./topk-js
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.libc "musl"
          yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-musl
          path: ./topk-js
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        env:
          TOPK_API_KEY: ${{ secrets.TOPK_API_KEY }}
        run: docker run -e TOPK_API_KEY --rm -v $(pwd):/build -w /build/topk-js node:${{ matrix.node }}-alpine sh -c 'apk add --no-cache ca-certificates && yarn test'
  test-linux-aarch64-gnu-binding:
    name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "20"
          - "22"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-unknown-linux-gnu
          path: ./topk-js
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "glibc"
          yarn install
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        env:
          TOPK_API_KEY: ${{ secrets.TOPK_API_KEY }}
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-slim
          options: "--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build/topk-js -e TOPK_API_KEY"
          run: |
            set -e
            apt-get update && apt-get install ca-certificates -y
            yarn test
            ls -la
  test-linux-aarch64-musl-binding:
    name: Test bindings on aarch64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-unknown-linux-musl
          path: ./topk-js
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "musl"
          yarn install
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        env:
          TOPK_API_KEY: ${{ secrets.TOPK_API_KEY }}
        uses: addnab/docker-run-action@v3
        with:
          image: node:lts-alpine
          options: "--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build/topk-js -e TOPK_API_KEY"
          run: |
            set -e
            apt-get update && apt-get install ca-certificates -y
            yarn test
  test-linux-arm-gnueabihf-binding:
    name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "20"
          - "22"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-armv7-unknown-linux-gnueabihf
          path: ./topk-js
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm"
          yarn install
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        env:
          TOPK_API_KEY: ${{ secrets.TOPK_API_KEY }}
      - name: Setup and run tests
        env:
          TOPK_API_KEY: ${{ secrets.TOPK_API_KEY }}
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-bookworm-slim
          options: "--platform linux/arm/v7 -v ${{ github.workspace }}:/build -w /build/topk-js -e TOPK_API_KEY"
          run: |
            set -e
            apt-get update
            apt-get install ca-certificates -y
            yarn test
            ls -la
  universal-macOS:
    name: Build universal macOS binary
    needs:
      - build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: ./topk-js
      - name: Install dependencies
        run: yarn install
      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-apple-darwin
          path: ./topk-js
      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-apple-darwin
          path: ./topk-js/
      - name: Combine binaries
        run: yarn universal
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-universal-apple-darwin
          path: ./topk-js/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  publish:
    name: Publish
    runs-on: ubuntu-latest
    if: ${{ inputs.publish }}
    needs:
      - test-macOS-windows-binding
      - test-linux-x64-gnu-binding
      - test-linux-x64-musl-binding
      - test-linux-aarch64-gnu-binding
      - test-linux-aarch64-musl-binding
      - test-linux-arm-gnueabihf-binding
      - universal-macOS
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: ./topk-js
      - name: Install dependencies
        run: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./topk-js/artifacts
      - name: Move artifacts
        run: yarn artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
